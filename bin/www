#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');

const rootPrefix = '..',
  app = require(rootPrefix + '/index'),
  logger = require(rootPrefix + '/lib/logger/customConsoleLogger'),
  responseHelper = require(rootPrefix + '/lib/formatter/response');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.A_PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  logger.error('Error while starting server.',error.code);
  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES': {
      const errorObject = responseHelper.error({
        internal_error_identifier: `elevated_privilege_required:b_w_1`,
        api_error_identifier: 'elevated_privilege_required',
        debug_options: { port: bind }
      });
      logger.error('b_w_1', bind + ' requires elevated privileges');
      process.exit(1);
      break;
    }
    case 'EADDRINUSE': {
      const errorObject = responseHelper.error({
        internal_error_identifier: `port_in_use:b_w_2`,
        api_error_identifier: 'port_in_use',
        debug_options: { port: bind }
      });
      logger.error('b_w_2', bind + ' is already in use');
      process.exit(1);
      break;
    }
    default:
      throw error;
  }
}
process.send = process.send || function () {};

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.log('Listening on ' + bind);
  process.send('ready');
}

process.on('SIGTERM', function(){
  onTerminationSignal();
});

process.on('SIGINT', function(){
  onTerminationSignal();
});

function onTerminationSignal() {
  logger.info('SIGINT signal received.');
  logger.log('Closing http server.');
  server.close(() => {
    logger.log('Current concurrent connections:', server.connections);
    logger.log('Http server closing. Bye.');
    process.exit(0);
  });

  setTimeout(function() {
      logger.log('Timeout occurred for server.close(). Current concurrent connections:', server.connections);
      process.exit(1);
  }, 60000);
}
